package com.clek.gef.persistence;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.clek.gef.model.Course;
import com.clek.gef.model.StudentsClass;

public class StudentsClassDAO {
private Connection conn;
	
	public StudentsClassDAO() throws DBException{
		try {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
        } catch (ClassNotFoundException ex) {
            throw new DBException("Erro ao se conectar com o Banco de Dados, n√£o foi encontrado o Driver.");
        }
	}
	
	private void openConn() throws SQLException{
		
		conn = DriverManager.getConnection(ConnectionString.connStr, "admin", "admin");
	}
	
	private void closeConn() throws SQLException{
		conn.commit();
		conn.close();
	}
	
	public void cleanTable() throws SQLException{
		String str = "DROP TABLE GEFDATABASE.STUDENTS_CLASS";
		openConn();
		PreparedStatement stmt = conn.prepareStatement(str);
		stmt.execute();
		closeConn();
	}
	
	public void recreateTable() throws SQLException{
		String str = "CREATE TABLE GEFDATABASE.Students_Class ( ID_STUDENTS_CLASS INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1)," + 
				"NUMBER_STUDENTS_CLASS VARCHAR(5) NOT NULL," + 
				"ID_COURSE INTEGER NOT NULL," + 
				"PRIMARY KEY(ID_STUDENTS_CLASS)," +
				"FOREIGN KEY(ID_COURSE) REFERENCES GEFDATABASE.Course," +
				"CONSTRAINT UK_STUDENTS_CLASS UNIQUE (NUMBER_STUDENTS_CLASS, ID_COURSE))";
		openConn();
		PreparedStatement stmt = conn.prepareStatement(str);
		stmt.execute();
		closeConn();
	}
	
	public void persist(StudentsClass sc) throws SQLException, DBException{
		
		
		CourseDAO cd = new CourseDAO();
		Course c = cd.getCourse(sc.getCourseCode());
		int id = cd.getId(c);
		openConn();
		String str = "INSERT INTO GEFDATABASE.STUDENTS_CLASS (NUMBER_STUDENTS_CLASS, ID_COURSE) VALUES (?,?)";
		PreparedStatement stmt = conn.prepareStatement(str);
		
		stmt.setString(1, sc.getCode());
		stmt.setInt(2, id);
		
		stmt.execute();
		
		closeConn();
		
		ClassTimeDAO ctd = new ClassTimeDAO();
		ctd.persist(sc.getClassTime(), sc);
	}
	
	public List<StudentsClass> getAllStudentsClasses() throws SQLException, DBException{
		openConn();
		
		String str = "SELECT * FROM GEFDATABASE.STUDENTS_CLASS";
		PreparedStatement stmt = conn.prepareStatement(str);
		ResultSet rs = stmt.executeQuery();

		
		
		List<StudentsClass> lstStudentsClass = new ArrayList<StudentsClass>();
		CourseDAO cd = new CourseDAO();
		ClassTimeDAO ctd = new ClassTimeDAO();
		while (rs.next()){
			StudentsClass sc = new StudentsClass();
			sc.setCode(rs.getString("NUMBER_STUDENTS_CLASS"));
			sc.sCourse(cd.getCourse(rs.getInt("ID_COURSE")));
			
			sc.setClassTime(ctd.getAllClassTime(sc));
			
			lstStudentsClass.add(sc);
		}
		closeConn();
		return lstStudentsClass;
	}
	
	protected StudentsClass getStudentsClass(int id) throws SQLException, DBException{
		openConn();
		
		String str = "SELECT * FROM GEFDATABASE.STUDENTS_CLASS WHERE GEFDATABASE.STUDENTS_CLASS.ID_STUDENTS_CLASS = ?";
		PreparedStatement stmt = conn.prepareStatement(str);
		stmt.setInt(1, id);
		ResultSet rs = stmt.executeQuery();

		
		
		CourseDAO cd = new CourseDAO();
		ClassTimeDAO ctd = new ClassTimeDAO();
		StudentsClass sc = null;
		if (rs.next()){
			sc = new StudentsClass();
			sc.setCode(rs.getString("NUMBER_STUDENTS_CLASS"));
			sc.sCourse(cd.getCourse(rs.getInt("ID_COURSE")));
			sc.setClassTime(ctd.getAllClassTime(sc));
		}
		closeConn();
		return sc;
	}
	
	public StudentsClass getStudentsClass(String code, Course c) throws SQLException, DBException{
		CourseDAO cd = new CourseDAO();
		int idC = cd.getId(c);
		
		openConn();
		
		String str = "SELECT * FROM GEFDATABASE.STUDENTS_CLASS WHERE GEFDATABASE.STUDENTS_CLASS.NUMBER_STUDENTS_CLASS = ? AND GEFDATABASE.STUDENTS_CLASS.ID_COURSE = ?";
		PreparedStatement stmt = conn.prepareStatement(str);
		stmt.setString(1, code);
		stmt.setInt(2, idC);
		ResultSet rs = stmt.executeQuery();
		

		ClassTimeDAO ctd = new ClassTimeDAO();
		StudentsClass sc = null;
		if (rs.next()){
			sc = new StudentsClass();
			sc.setCode(rs.getString("NUMBER_STUDENTS_CLASS"));
			sc.sCourse(c);
			sc.setClassTime(ctd.getAllClassTime(sc));
		}
		closeConn();
		return sc;
	}
	
	protected int getId(StudentsClass sc) throws SQLException, DBException{
		CourseDAO cd = new CourseDAO();
		Course c = cd.getCourse(sc.getCourseCode());
		int id = cd.getId(c);
		
		openConn();
		
		String str = "SELECT * FROM GEFDATABASE.STUDENTS_CLASS WHERE GEFDATABASE.STUDENTS_CLASS.NUMBER_STUDENTS_CLASS = ? AND GEFDATABASE.STUDENTS_CLASS.ID_COURSE = ?";
		PreparedStatement stmt = conn.prepareStatement(str);
		stmt.setString(1, sc.getCode());
		stmt.setInt(2, idC);
		ResultSet rs = stmt.executeQuery();
		
		
		
		int id = 0;
		
		if (rs.next()){
			id = rs.getInt("ID_COURSE");
		} else {
			id = -1;
		}
		closeConn();
		return id;
	}
}
